# Copyright 2005-2011 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

from cStringIO import StringIO
import json

from testtools import TestCase
from testtools.deferredruntest import run_with_log_observers
from twisted.internet.defer import (
    Deferred,
    fail,
    succeed,
    )
from txlongpoll.frontend import FrontEndAjax


class FakeMessageQueue(object):

    def __init__(self):
        self.messages = {}
        self._prefix = "test"

    def get_message(self, uuid, sequence):
        message = self.messages[uuid]
        if isinstance(message, Exception):
            return fail(message)
        else:
            return succeed((message, "tag"))

    def ack_message(self, tag):
        pass


class FakeRequest(object):

    def __init__(self, args):
        self.args = args
        self.written = StringIO()
        self.finished = False
        self.code = 200
        self.notifications = []

    def write(self, content):
        assert type(content) is str, "Only strings should be written"
        self.written.write(content)

    def finish(self):
        self.finished = True
        for deferred in self.notifications:
            deferred.callback(None)

    def setResponseCode(self, code):
        self.code = code

    def notifyFinish(self):
        deferred = Deferred()
        self.notifications.append(deferred)
        return deferred

    def setHeader(self, key, value):
        pass


class FrontEndAjaxTest(TestCase):
    """
    Tests for L{FrontEndAjax}.
    """

    def setUp(self):
        super(FrontEndAjaxTest, self).setUp()
        self.message_queue = FakeMessageQueue()
        self.ajax = FrontEndAjax(self.message_queue)

    def test_render_success(self):
        """
        L{FrontEndAjax.render} displays the message got via get_message after
        getting the uuid from the request.
        """
        body = json.dumps({"result": "some content"})
        self.message_queue.messages["uuid1"] = body
        request = FakeRequest({"uuid": ["uuid1"], "sequence": ["0"]})
        self.ajax.render(request)
        self.assertEquals(request.written.getvalue(), body)

    def test_render_ignore_self_messages(self):
        """
        L{FrontEndAjax.render} ignores notifications for generated by the same
        page, to prevent useless messages.
        """
        body1 = json.dumps(
            {"result": "some content", "original-uuid": "uuid1"})
        body2 = json.dumps({"result": "some other content"})
        messages = [body1, body2]

        def get_message(uuid, sequence):
            return succeed((messages.pop(0), "tag"))

        self.message_queue.get_message = get_message

        request = FakeRequest({"uuid": ["uuid1"], "sequence": ["0"]})
        self.ajax.render(request)
        self.assertEquals(request.written.getvalue(), body2)

    def test_render_catch_error(self):
        """
        L{FrontEndAjax.render} checks the content of the message to see if it
        contains an error, and returns that error message along with a 500 code
        if it's the case.
        """
        body = json.dumps({"error": u"oops a problem"})
        self.message_queue.messages["uuid1"] = body
        request = FakeRequest({"uuid": ["uuid1"], "sequence": ["0"]})
        self.ajax.render(request)
        self.assertEquals(request.written.getvalue(), body)
        self.assertEquals(request.code, 400)

    def test_render_error(self):
        """
        L{FrontEndAjax.render} displays an error if C{get_message} raises an
        exception.
        """
        self.message_queue.messages["uuid1"] = ValueError("Not there")
        request = FakeRequest({"uuid": ["uuid1"], "sequence": ["0"]})
        run_with_log_observers([], self.ajax.render, request)
        self.assertEquals(request.written.getvalue(), "Not there")
        self.assertEquals(request.code, 500)

    def test_render_monitor(self):
        """
        L{FrontEndAjax.render} returns a static string if no parameters are
        passed for monitoring purposes.
        """
        request = FakeRequest({})
        data = self.ajax.render(request)
        self.assertEqual("Async frontend for test", data)
        self.assertEqual("", request.written.getvalue())
        self.assertEqual(200, request.code)

    def test_render_no_uuid(self):
        """
        L{FrontEndAjax.render} displays an error if no uuid is passed to the
        request.
        """
        request = FakeRequest({"sequence": ["0"]})
        data = self.ajax.render(request)
        self.assertEqual("Invalid request", data)
        self.assertEqual("", request.written.getvalue())
        self.assertEqual(400, request.code)

    def test_render_no_sequence(self):
        """
        L{FrontEndAjax.render} displays an error if no sequence is passed to
        the request.
        """
        request = FakeRequest({"uuid": ["uuid1"]})
        data = self.ajax.render(request)
        self.assertEqual("Invalid request", data)
        self.assertEqual("", request.written.getvalue())
        self.assertEqual(400, request.code)

    def test_render_empty_uuid(self):
        """
        L{FrontEndAjax.render} displays an error if the given UUID is empty.
        """
        request = FakeRequest({"uuid": [""], "sequence": ["0"]})
        data = self.ajax.render(request)
        self.assertEqual("Invalid request", data)
        self.assertEqual("", request.written.getvalue())
        self.assertEqual(400, request.code)

    def test_render_empty_sequence(self):
        """
        L{FrontEndAjax.render} displays an error if the given sequence is
        empty.
        """
        request = FakeRequest({"uuid": ["uuid"], "sequence": [""]})
        data = self.ajax.render(request)
        self.assertEqual("Invalid request", data)
        self.assertEqual("", request.written.getvalue())
        self.assertEqual(400, request.code)
